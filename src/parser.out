Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> parsed
Rule 1     parsed -> <empty>
Rule 2     parsed -> parsed stmt
Rule 3     stmt -> VARIABLE EQUAL expr
Rule 4     stmt -> BUILDIN EQUAL expr
Rule 5     stmt -> expr
Rule 6     stmt -> FOR VARIABLE IN VARIABLE stmt
Rule 7     stmt -> IF LPAREN expr RPAREN stmt
Rule 8     stmt -> IF LPAREN expr RPAREN stmt ELSE stmt
Rule 9     stmt -> WHILE LPAREN expr RPAREN stmt
Rule 10    stmt -> LBRACE stmtlist RBRACE
Rule 11    stmtlist -> stmt
Rule 12    stmtlist -> stmtlist stmt
Rule 13    expr -> NUMBER
Rule 14    expr -> STRING
Rule 15    expr -> LBRACKET RBRACKET
Rule 16    expr -> VARIABLE
Rule 17    expr -> BUILDIN
Rule 18    expr -> expr PLUS expr
Rule 19    expr -> expr MINUS expr
Rule 20    expr -> expr TIMES expr
Rule 21    expr -> expr DIVIDE expr
Rule 22    expr -> expr GT expr
Rule 23    expr -> expr GE expr
Rule 24    expr -> expr LT expr
Rule 25    expr -> expr LE expr
Rule 26    expr -> expr EQ expr
Rule 27    expr -> expr NE expr
Rule 28    expr -> expr AND expr
Rule 29    expr -> expr OR expr
Rule 30    expr -> expr MOD expr
Rule 31    expr -> LPAREN expr RPAREN
Rule 32    expr -> BUILDIN LPAREN RPAREN
Rule 33    expr -> BUILDIN LPAREN expr RPAREN
Rule 34    expr -> BUILDIN LPAREN expr COMMA expr RPAREN
Rule 35    expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
Rule 36    expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
Rule 37    expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

Terminals, with rules where they appear

AND                  : 28
BUILDIN              : 4 17 32 33 34 35 36 37
COMMA                : 34 35 35 36 36 36 37 37 37 37
DIVIDE               : 21
ELSE                 : 8
EQ                   : 26
EQUAL                : 3 4
FOR                  : 6
GE                   : 23
GT                   : 22
IF                   : 7 8
IN                   : 6
LBRACE               : 10
LBRACKET             : 15
LE                   : 25
LPAREN               : 7 8 9 31 32 33 34 35 36 37
LT                   : 24
MINUS                : 19
MOD                  : 30
NE                   : 27
NUMBER               : 13
OR                   : 29
PLUS                 : 18
RBRACE               : 10
RBRACKET             : 15
RPAREN               : 7 8 9 31 32 33 34 35 36 37
STRING               : 14
TIMES                : 20
VARIABLE             : 3 6 6 16
WHILE                : 9
error                : 

Nonterminals, with rules where they appear

expr                 : 3 4 5 7 8 9 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 33 34 34 35 35 35 36 36 36 36 37 37 37 37 37
parsed               : 2 0
stmt                 : 2 6 7 8 8 9 11 12
stmtlist             : 10 12

Parsing method: LALR

state 0

    (0) S' -> . parsed
    (1) parsed -> .
    (2) parsed -> . parsed stmt

    VARIABLE        reduce using rule 1 (parsed -> .)
    BUILDIN         reduce using rule 1 (parsed -> .)
    FOR             reduce using rule 1 (parsed -> .)
    IF              reduce using rule 1 (parsed -> .)
    WHILE           reduce using rule 1 (parsed -> .)
    LBRACE          reduce using rule 1 (parsed -> .)
    NUMBER          reduce using rule 1 (parsed -> .)
    STRING          reduce using rule 1 (parsed -> .)
    LBRACKET        reduce using rule 1 (parsed -> .)
    LPAREN          reduce using rule 1 (parsed -> .)
    $end            reduce using rule 1 (parsed -> .)

    parsed                         shift and go to state 1

state 1

    (0) S' -> parsed .
    (2) parsed -> parsed . stmt
    (3) stmt -> . VARIABLE EQUAL expr
    (4) stmt -> . BUILDIN EQUAL expr
    (5) stmt -> . expr
    (6) stmt -> . FOR VARIABLE IN VARIABLE stmt
    (7) stmt -> . IF LPAREN expr RPAREN stmt
    (8) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (9) stmt -> . WHILE LPAREN expr RPAREN stmt
    (10) stmt -> . LBRACE stmtlist RBRACE
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    VARIABLE        shift and go to state 10
    BUILDIN         shift and go to state 6
    FOR             shift and go to state 7
    IF              shift and go to state 11
    WHILE           shift and go to state 4
    LBRACE          shift and go to state 12
    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    LPAREN          shift and go to state 9

    expr                           shift and go to state 13
    stmt                           shift and go to state 8

state 2

    (13) expr -> NUMBER .

    PLUS            reduce using rule 13 (expr -> NUMBER .)
    MINUS           reduce using rule 13 (expr -> NUMBER .)
    TIMES           reduce using rule 13 (expr -> NUMBER .)
    DIVIDE          reduce using rule 13 (expr -> NUMBER .)
    GT              reduce using rule 13 (expr -> NUMBER .)
    GE              reduce using rule 13 (expr -> NUMBER .)
    LT              reduce using rule 13 (expr -> NUMBER .)
    LE              reduce using rule 13 (expr -> NUMBER .)
    EQ              reduce using rule 13 (expr -> NUMBER .)
    NE              reduce using rule 13 (expr -> NUMBER .)
    AND             reduce using rule 13 (expr -> NUMBER .)
    OR              reduce using rule 13 (expr -> NUMBER .)
    MOD             reduce using rule 13 (expr -> NUMBER .)
    VARIABLE        reduce using rule 13 (expr -> NUMBER .)
    BUILDIN         reduce using rule 13 (expr -> NUMBER .)
    FOR             reduce using rule 13 (expr -> NUMBER .)
    IF              reduce using rule 13 (expr -> NUMBER .)
    WHILE           reduce using rule 13 (expr -> NUMBER .)
    LBRACE          reduce using rule 13 (expr -> NUMBER .)
    NUMBER          reduce using rule 13 (expr -> NUMBER .)
    STRING          reduce using rule 13 (expr -> NUMBER .)
    LBRACKET        reduce using rule 13 (expr -> NUMBER .)
    LPAREN          reduce using rule 13 (expr -> NUMBER .)
    $end            reduce using rule 13 (expr -> NUMBER .)
    RPAREN          reduce using rule 13 (expr -> NUMBER .)
    RBRACE          reduce using rule 13 (expr -> NUMBER .)
    ELSE            reduce using rule 13 (expr -> NUMBER .)
    COMMA           reduce using rule 13 (expr -> NUMBER .)


state 3

    (15) expr -> LBRACKET . RBRACKET

    RBRACKET        shift and go to state 14


state 4

    (9) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 15


state 5

    (14) expr -> STRING .

    PLUS            reduce using rule 14 (expr -> STRING .)
    MINUS           reduce using rule 14 (expr -> STRING .)
    TIMES           reduce using rule 14 (expr -> STRING .)
    DIVIDE          reduce using rule 14 (expr -> STRING .)
    GT              reduce using rule 14 (expr -> STRING .)
    GE              reduce using rule 14 (expr -> STRING .)
    LT              reduce using rule 14 (expr -> STRING .)
    LE              reduce using rule 14 (expr -> STRING .)
    EQ              reduce using rule 14 (expr -> STRING .)
    NE              reduce using rule 14 (expr -> STRING .)
    AND             reduce using rule 14 (expr -> STRING .)
    OR              reduce using rule 14 (expr -> STRING .)
    MOD             reduce using rule 14 (expr -> STRING .)
    VARIABLE        reduce using rule 14 (expr -> STRING .)
    BUILDIN         reduce using rule 14 (expr -> STRING .)
    FOR             reduce using rule 14 (expr -> STRING .)
    IF              reduce using rule 14 (expr -> STRING .)
    WHILE           reduce using rule 14 (expr -> STRING .)
    LBRACE          reduce using rule 14 (expr -> STRING .)
    NUMBER          reduce using rule 14 (expr -> STRING .)
    STRING          reduce using rule 14 (expr -> STRING .)
    LBRACKET        reduce using rule 14 (expr -> STRING .)
    LPAREN          reduce using rule 14 (expr -> STRING .)
    $end            reduce using rule 14 (expr -> STRING .)
    RPAREN          reduce using rule 14 (expr -> STRING .)
    RBRACE          reduce using rule 14 (expr -> STRING .)
    ELSE            reduce using rule 14 (expr -> STRING .)
    COMMA           reduce using rule 14 (expr -> STRING .)


state 6

    (4) stmt -> BUILDIN . EQUAL expr
    (17) expr -> BUILDIN .
    (32) expr -> BUILDIN . LPAREN RPAREN
    (33) expr -> BUILDIN . LPAREN expr RPAREN
    (34) expr -> BUILDIN . LPAREN expr COMMA expr RPAREN
    (35) expr -> BUILDIN . LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> BUILDIN . LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> BUILDIN . LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUAL           shift and go to state 16
    PLUS            reduce using rule 17 (expr -> BUILDIN .)
    MINUS           reduce using rule 17 (expr -> BUILDIN .)
    TIMES           reduce using rule 17 (expr -> BUILDIN .)
    DIVIDE          reduce using rule 17 (expr -> BUILDIN .)
    GT              reduce using rule 17 (expr -> BUILDIN .)
    GE              reduce using rule 17 (expr -> BUILDIN .)
    LT              reduce using rule 17 (expr -> BUILDIN .)
    LE              reduce using rule 17 (expr -> BUILDIN .)
    EQ              reduce using rule 17 (expr -> BUILDIN .)
    NE              reduce using rule 17 (expr -> BUILDIN .)
    AND             reduce using rule 17 (expr -> BUILDIN .)
    OR              reduce using rule 17 (expr -> BUILDIN .)
    MOD             reduce using rule 17 (expr -> BUILDIN .)
    VARIABLE        reduce using rule 17 (expr -> BUILDIN .)
    BUILDIN         reduce using rule 17 (expr -> BUILDIN .)
    FOR             reduce using rule 17 (expr -> BUILDIN .)
    IF              reduce using rule 17 (expr -> BUILDIN .)
    WHILE           reduce using rule 17 (expr -> BUILDIN .)
    LBRACE          reduce using rule 17 (expr -> BUILDIN .)
    NUMBER          reduce using rule 17 (expr -> BUILDIN .)
    STRING          reduce using rule 17 (expr -> BUILDIN .)
    LBRACKET        reduce using rule 17 (expr -> BUILDIN .)
    $end            reduce using rule 17 (expr -> BUILDIN .)
    RBRACE          reduce using rule 17 (expr -> BUILDIN .)
    ELSE            reduce using rule 17 (expr -> BUILDIN .)
    LPAREN          shift and go to state 17

  ! LPAREN          [ reduce using rule 17 (expr -> BUILDIN .) ]


state 7

    (6) stmt -> FOR . VARIABLE IN VARIABLE stmt

    VARIABLE        shift and go to state 18


state 8

    (2) parsed -> parsed stmt .

    VARIABLE        reduce using rule 2 (parsed -> parsed stmt .)
    BUILDIN         reduce using rule 2 (parsed -> parsed stmt .)
    FOR             reduce using rule 2 (parsed -> parsed stmt .)
    IF              reduce using rule 2 (parsed -> parsed stmt .)
    WHILE           reduce using rule 2 (parsed -> parsed stmt .)
    LBRACE          reduce using rule 2 (parsed -> parsed stmt .)
    NUMBER          reduce using rule 2 (parsed -> parsed stmt .)
    STRING          reduce using rule 2 (parsed -> parsed stmt .)
    LBRACKET        reduce using rule 2 (parsed -> parsed stmt .)
    LPAREN          reduce using rule 2 (parsed -> parsed stmt .)
    $end            reduce using rule 2 (parsed -> parsed stmt .)


state 9

    (31) expr -> LPAREN . expr RPAREN
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 21

state 10

    (3) stmt -> VARIABLE . EQUAL expr
    (16) expr -> VARIABLE .

    EQUAL           shift and go to state 22
    PLUS            reduce using rule 16 (expr -> VARIABLE .)
    MINUS           reduce using rule 16 (expr -> VARIABLE .)
    TIMES           reduce using rule 16 (expr -> VARIABLE .)
    DIVIDE          reduce using rule 16 (expr -> VARIABLE .)
    GT              reduce using rule 16 (expr -> VARIABLE .)
    GE              reduce using rule 16 (expr -> VARIABLE .)
    LT              reduce using rule 16 (expr -> VARIABLE .)
    LE              reduce using rule 16 (expr -> VARIABLE .)
    EQ              reduce using rule 16 (expr -> VARIABLE .)
    NE              reduce using rule 16 (expr -> VARIABLE .)
    AND             reduce using rule 16 (expr -> VARIABLE .)
    OR              reduce using rule 16 (expr -> VARIABLE .)
    MOD             reduce using rule 16 (expr -> VARIABLE .)
    VARIABLE        reduce using rule 16 (expr -> VARIABLE .)
    BUILDIN         reduce using rule 16 (expr -> VARIABLE .)
    FOR             reduce using rule 16 (expr -> VARIABLE .)
    IF              reduce using rule 16 (expr -> VARIABLE .)
    WHILE           reduce using rule 16 (expr -> VARIABLE .)
    LBRACE          reduce using rule 16 (expr -> VARIABLE .)
    NUMBER          reduce using rule 16 (expr -> VARIABLE .)
    STRING          reduce using rule 16 (expr -> VARIABLE .)
    LBRACKET        reduce using rule 16 (expr -> VARIABLE .)
    LPAREN          reduce using rule 16 (expr -> VARIABLE .)
    $end            reduce using rule 16 (expr -> VARIABLE .)
    RBRACE          reduce using rule 16 (expr -> VARIABLE .)
    ELSE            reduce using rule 16 (expr -> VARIABLE .)


state 11

    (7) stmt -> IF . LPAREN expr RPAREN stmt
    (8) stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt

    LPAREN          shift and go to state 23


state 12

    (10) stmt -> LBRACE . stmtlist RBRACE
    (11) stmtlist -> . stmt
    (12) stmtlist -> . stmtlist stmt
    (3) stmt -> . VARIABLE EQUAL expr
    (4) stmt -> . BUILDIN EQUAL expr
    (5) stmt -> . expr
    (6) stmt -> . FOR VARIABLE IN VARIABLE stmt
    (7) stmt -> . IF LPAREN expr RPAREN stmt
    (8) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (9) stmt -> . WHILE LPAREN expr RPAREN stmt
    (10) stmt -> . LBRACE stmtlist RBRACE
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    VARIABLE        shift and go to state 10
    BUILDIN         shift and go to state 6
    FOR             shift and go to state 7
    IF              shift and go to state 11
    WHILE           shift and go to state 4
    LBRACE          shift and go to state 12
    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    LPAREN          shift and go to state 9

    expr                           shift and go to state 13
    stmt                           shift and go to state 25
    stmtlist                       shift and go to state 24

state 13

    (5) stmt -> expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    RBRACE          reduce using rule 5 (stmt -> expr .)
    VARIABLE        reduce using rule 5 (stmt -> expr .)
    BUILDIN         reduce using rule 5 (stmt -> expr .)
    FOR             reduce using rule 5 (stmt -> expr .)
    IF              reduce using rule 5 (stmt -> expr .)
    WHILE           reduce using rule 5 (stmt -> expr .)
    LBRACE          reduce using rule 5 (stmt -> expr .)
    NUMBER          reduce using rule 5 (stmt -> expr .)
    STRING          reduce using rule 5 (stmt -> expr .)
    LBRACKET        reduce using rule 5 (stmt -> expr .)
    LPAREN          reduce using rule 5 (stmt -> expr .)
    $end            reduce using rule 5 (stmt -> expr .)
    ELSE            reduce using rule 5 (stmt -> expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34


state 14

    (15) expr -> LBRACKET RBRACKET .

    PLUS            reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    GT              reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    GE              reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    LT              reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    LE              reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    EQ              reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    NE              reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    AND             reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    OR              reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    MOD             reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    BUILDIN         reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    FOR             reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    IF              reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    STRING          reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    $end            reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 15 (expr -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 15 (expr -> LBRACKET RBRACKET .)


state 15

    (9) stmt -> WHILE LPAREN . expr RPAREN stmt
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 39

state 16

    (4) stmt -> BUILDIN EQUAL . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 40

state 17

    (32) expr -> BUILDIN LPAREN . RPAREN
    (33) expr -> BUILDIN LPAREN . expr RPAREN
    (34) expr -> BUILDIN LPAREN . expr COMMA expr RPAREN
    (35) expr -> BUILDIN LPAREN . expr COMMA expr COMMA expr RPAREN
    (36) expr -> BUILDIN LPAREN . expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> BUILDIN LPAREN . expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    RPAREN          shift and go to state 41
    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 42

state 18

    (6) stmt -> FOR VARIABLE . IN VARIABLE stmt

    IN              shift and go to state 43


state 19

    (17) expr -> BUILDIN .
    (32) expr -> BUILDIN . LPAREN RPAREN
    (33) expr -> BUILDIN . LPAREN expr RPAREN
    (34) expr -> BUILDIN . LPAREN expr COMMA expr RPAREN
    (35) expr -> BUILDIN . LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> BUILDIN . LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> BUILDIN . LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    PLUS            reduce using rule 17 (expr -> BUILDIN .)
    MINUS           reduce using rule 17 (expr -> BUILDIN .)
    TIMES           reduce using rule 17 (expr -> BUILDIN .)
    DIVIDE          reduce using rule 17 (expr -> BUILDIN .)
    GT              reduce using rule 17 (expr -> BUILDIN .)
    GE              reduce using rule 17 (expr -> BUILDIN .)
    LT              reduce using rule 17 (expr -> BUILDIN .)
    LE              reduce using rule 17 (expr -> BUILDIN .)
    EQ              reduce using rule 17 (expr -> BUILDIN .)
    NE              reduce using rule 17 (expr -> BUILDIN .)
    AND             reduce using rule 17 (expr -> BUILDIN .)
    OR              reduce using rule 17 (expr -> BUILDIN .)
    MOD             reduce using rule 17 (expr -> BUILDIN .)
    VARIABLE        reduce using rule 17 (expr -> BUILDIN .)
    BUILDIN         reduce using rule 17 (expr -> BUILDIN .)
    FOR             reduce using rule 17 (expr -> BUILDIN .)
    IF              reduce using rule 17 (expr -> BUILDIN .)
    WHILE           reduce using rule 17 (expr -> BUILDIN .)
    LBRACE          reduce using rule 17 (expr -> BUILDIN .)
    NUMBER          reduce using rule 17 (expr -> BUILDIN .)
    STRING          reduce using rule 17 (expr -> BUILDIN .)
    LBRACKET        reduce using rule 17 (expr -> BUILDIN .)
    $end            reduce using rule 17 (expr -> BUILDIN .)
    RPAREN          reduce using rule 17 (expr -> BUILDIN .)
    RBRACE          reduce using rule 17 (expr -> BUILDIN .)
    ELSE            reduce using rule 17 (expr -> BUILDIN .)
    COMMA           reduce using rule 17 (expr -> BUILDIN .)
    LPAREN          shift and go to state 17

  ! LPAREN          [ reduce using rule 17 (expr -> BUILDIN .) ]


state 20

    (16) expr -> VARIABLE .

    PLUS            reduce using rule 16 (expr -> VARIABLE .)
    MINUS           reduce using rule 16 (expr -> VARIABLE .)
    TIMES           reduce using rule 16 (expr -> VARIABLE .)
    DIVIDE          reduce using rule 16 (expr -> VARIABLE .)
    GT              reduce using rule 16 (expr -> VARIABLE .)
    GE              reduce using rule 16 (expr -> VARIABLE .)
    LT              reduce using rule 16 (expr -> VARIABLE .)
    LE              reduce using rule 16 (expr -> VARIABLE .)
    EQ              reduce using rule 16 (expr -> VARIABLE .)
    NE              reduce using rule 16 (expr -> VARIABLE .)
    AND             reduce using rule 16 (expr -> VARIABLE .)
    OR              reduce using rule 16 (expr -> VARIABLE .)
    MOD             reduce using rule 16 (expr -> VARIABLE .)
    VARIABLE        reduce using rule 16 (expr -> VARIABLE .)
    BUILDIN         reduce using rule 16 (expr -> VARIABLE .)
    FOR             reduce using rule 16 (expr -> VARIABLE .)
    IF              reduce using rule 16 (expr -> VARIABLE .)
    WHILE           reduce using rule 16 (expr -> VARIABLE .)
    LBRACE          reduce using rule 16 (expr -> VARIABLE .)
    NUMBER          reduce using rule 16 (expr -> VARIABLE .)
    STRING          reduce using rule 16 (expr -> VARIABLE .)
    LBRACKET        reduce using rule 16 (expr -> VARIABLE .)
    LPAREN          reduce using rule 16 (expr -> VARIABLE .)
    $end            reduce using rule 16 (expr -> VARIABLE .)
    RPAREN          reduce using rule 16 (expr -> VARIABLE .)
    RBRACE          reduce using rule 16 (expr -> VARIABLE .)
    ELSE            reduce using rule 16 (expr -> VARIABLE .)
    COMMA           reduce using rule 16 (expr -> VARIABLE .)


state 21

    (31) expr -> LPAREN expr . RPAREN
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    RPAREN          shift and go to state 44
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34


state 22

    (3) stmt -> VARIABLE EQUAL . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 45

state 23

    (7) stmt -> IF LPAREN . expr RPAREN stmt
    (8) stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 46

state 24

    (10) stmt -> LBRACE stmtlist . RBRACE
    (12) stmtlist -> stmtlist . stmt
    (3) stmt -> . VARIABLE EQUAL expr
    (4) stmt -> . BUILDIN EQUAL expr
    (5) stmt -> . expr
    (6) stmt -> . FOR VARIABLE IN VARIABLE stmt
    (7) stmt -> . IF LPAREN expr RPAREN stmt
    (8) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (9) stmt -> . WHILE LPAREN expr RPAREN stmt
    (10) stmt -> . LBRACE stmtlist RBRACE
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    RBRACE          shift and go to state 47
    VARIABLE        shift and go to state 10
    BUILDIN         shift and go to state 6
    FOR             shift and go to state 7
    IF              shift and go to state 11
    WHILE           shift and go to state 4
    LBRACE          shift and go to state 12
    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    LPAREN          shift and go to state 9

    expr                           shift and go to state 13
    stmt                           shift and go to state 48

state 25

    (11) stmtlist -> stmt .

    RBRACE          reduce using rule 11 (stmtlist -> stmt .)
    VARIABLE        reduce using rule 11 (stmtlist -> stmt .)
    BUILDIN         reduce using rule 11 (stmtlist -> stmt .)
    FOR             reduce using rule 11 (stmtlist -> stmt .)
    IF              reduce using rule 11 (stmtlist -> stmt .)
    WHILE           reduce using rule 11 (stmtlist -> stmt .)
    LBRACE          reduce using rule 11 (stmtlist -> stmt .)
    NUMBER          reduce using rule 11 (stmtlist -> stmt .)
    STRING          reduce using rule 11 (stmtlist -> stmt .)
    LBRACKET        reduce using rule 11 (stmtlist -> stmt .)
    LPAREN          reduce using rule 11 (stmtlist -> stmt .)


state 26

    (28) expr -> expr AND . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 49

state 27

    (22) expr -> expr GT . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 50

state 28

    (21) expr -> expr DIVIDE . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 51

state 29

    (24) expr -> expr LT . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 52

state 30

    (20) expr -> expr TIMES . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 53

state 31

    (23) expr -> expr GE . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 54

state 32

    (25) expr -> expr LE . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 55

state 33

    (18) expr -> expr PLUS . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 56

state 34

    (30) expr -> expr MOD . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 57

state 35

    (26) expr -> expr EQ . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 58

state 36

    (19) expr -> expr MINUS . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 59

state 37

    (27) expr -> expr NE . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 60

state 38

    (29) expr -> expr OR . expr
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 61

state 39

    (9) stmt -> WHILE LPAREN expr . RPAREN stmt
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    RPAREN          shift and go to state 62
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34


state 40

    (4) stmt -> BUILDIN EQUAL expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    RBRACE          reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    VARIABLE        reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    BUILDIN         reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    FOR             reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    IF              reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    WHILE           reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    LBRACE          reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    NUMBER          reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    STRING          reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    LBRACKET        reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    LPAREN          reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    $end            reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    ELSE            reduce using rule 4 (stmt -> BUILDIN EQUAL expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34


state 41

    (32) expr -> BUILDIN LPAREN RPAREN .

    PLUS            reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    MINUS           reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    TIMES           reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    DIVIDE          reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    GT              reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    GE              reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    LT              reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    LE              reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    EQ              reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    NE              reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    AND             reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    OR              reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    MOD             reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    VARIABLE        reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    BUILDIN         reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    FOR             reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    IF              reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    WHILE           reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    LBRACE          reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    NUMBER          reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    STRING          reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    LBRACKET        reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    LPAREN          reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    $end            reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    RPAREN          reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    RBRACE          reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    ELSE            reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)
    COMMA           reduce using rule 32 (expr -> BUILDIN LPAREN RPAREN .)


state 42

    (33) expr -> BUILDIN LPAREN expr . RPAREN
    (34) expr -> BUILDIN LPAREN expr . COMMA expr RPAREN
    (35) expr -> BUILDIN LPAREN expr . COMMA expr COMMA expr RPAREN
    (36) expr -> BUILDIN LPAREN expr . COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> BUILDIN LPAREN expr . COMMA expr COMMA expr COMMA expr COMMA expr RPAREN
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    RPAREN          shift and go to state 63
    COMMA           shift and go to state 64
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34


state 43

    (6) stmt -> FOR VARIABLE IN . VARIABLE stmt

    VARIABLE        shift and go to state 65


state 44

    (31) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    BUILDIN         reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    STRING          reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    LBRACKET        reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 31 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 31 (expr -> LPAREN expr RPAREN .)


state 45

    (3) stmt -> VARIABLE EQUAL expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    RBRACE          reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    VARIABLE        reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    BUILDIN         reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    FOR             reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    IF              reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    WHILE           reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    LBRACE          reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    NUMBER          reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    STRING          reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    LBRACKET        reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    LPAREN          reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    $end            reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    ELSE            reduce using rule 3 (stmt -> VARIABLE EQUAL expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34


state 46

    (7) stmt -> IF LPAREN expr . RPAREN stmt
    (8) stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    RPAREN          shift and go to state 66
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34


state 47

    (10) stmt -> LBRACE stmtlist RBRACE .

    RBRACE          reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    VARIABLE        reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    BUILDIN         reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    FOR             reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    IF              reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    WHILE           reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    LBRACE          reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    NUMBER          reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    STRING          reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    LBRACKET        reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    LPAREN          reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    $end            reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)
    ELSE            reduce using rule 10 (stmt -> LBRACE stmtlist RBRACE .)


state 48

    (12) stmtlist -> stmtlist stmt .

    RBRACE          reduce using rule 12 (stmtlist -> stmtlist stmt .)
    VARIABLE        reduce using rule 12 (stmtlist -> stmtlist stmt .)
    BUILDIN         reduce using rule 12 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 12 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 12 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 12 (stmtlist -> stmtlist stmt .)
    LBRACE          reduce using rule 12 (stmtlist -> stmtlist stmt .)
    NUMBER          reduce using rule 12 (stmtlist -> stmtlist stmt .)
    STRING          reduce using rule 12 (stmtlist -> stmtlist stmt .)
    LBRACKET        reduce using rule 12 (stmtlist -> stmtlist stmt .)
    LPAREN          reduce using rule 12 (stmtlist -> stmtlist stmt .)


state 49

    (28) expr -> expr AND expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    AND             reduce using rule 28 (expr -> expr AND expr .)
    OR              reduce using rule 28 (expr -> expr AND expr .)
    MOD             reduce using rule 28 (expr -> expr AND expr .)
    VARIABLE        reduce using rule 28 (expr -> expr AND expr .)
    BUILDIN         reduce using rule 28 (expr -> expr AND expr .)
    FOR             reduce using rule 28 (expr -> expr AND expr .)
    IF              reduce using rule 28 (expr -> expr AND expr .)
    WHILE           reduce using rule 28 (expr -> expr AND expr .)
    LBRACE          reduce using rule 28 (expr -> expr AND expr .)
    NUMBER          reduce using rule 28 (expr -> expr AND expr .)
    STRING          reduce using rule 28 (expr -> expr AND expr .)
    LBRACKET        reduce using rule 28 (expr -> expr AND expr .)
    LPAREN          reduce using rule 28 (expr -> expr AND expr .)
    $end            reduce using rule 28 (expr -> expr AND expr .)
    RPAREN          reduce using rule 28 (expr -> expr AND expr .)
    RBRACE          reduce using rule 28 (expr -> expr AND expr .)
    ELSE            reduce using rule 28 (expr -> expr AND expr .)
    COMMA           reduce using rule 28 (expr -> expr AND expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37

  ! PLUS            [ reduce using rule 28 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 28 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 28 (expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 28 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 28 (expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 28 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 28 (expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 28 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 50

    (22) expr -> expr GT expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    GT              reduce using rule 22 (expr -> expr GT expr .)
    GE              reduce using rule 22 (expr -> expr GT expr .)
    LT              reduce using rule 22 (expr -> expr GT expr .)
    LE              reduce using rule 22 (expr -> expr GT expr .)
    EQ              reduce using rule 22 (expr -> expr GT expr .)
    NE              reduce using rule 22 (expr -> expr GT expr .)
    AND             reduce using rule 22 (expr -> expr GT expr .)
    OR              reduce using rule 22 (expr -> expr GT expr .)
    MOD             reduce using rule 22 (expr -> expr GT expr .)
    VARIABLE        reduce using rule 22 (expr -> expr GT expr .)
    BUILDIN         reduce using rule 22 (expr -> expr GT expr .)
    FOR             reduce using rule 22 (expr -> expr GT expr .)
    IF              reduce using rule 22 (expr -> expr GT expr .)
    WHILE           reduce using rule 22 (expr -> expr GT expr .)
    LBRACE          reduce using rule 22 (expr -> expr GT expr .)
    NUMBER          reduce using rule 22 (expr -> expr GT expr .)
    STRING          reduce using rule 22 (expr -> expr GT expr .)
    LBRACKET        reduce using rule 22 (expr -> expr GT expr .)
    LPAREN          reduce using rule 22 (expr -> expr GT expr .)
    $end            reduce using rule 22 (expr -> expr GT expr .)
    RPAREN          reduce using rule 22 (expr -> expr GT expr .)
    RBRACE          reduce using rule 22 (expr -> expr GT expr .)
    ELSE            reduce using rule 22 (expr -> expr GT expr .)
    COMMA           reduce using rule 22 (expr -> expr GT expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28

  ! PLUS            [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr GT expr .) ]
  ! GT              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 51

    (21) expr -> expr DIVIDE expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    PLUS            reduce using rule 21 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 21 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 21 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 21 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 21 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 21 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 21 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 21 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 21 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 21 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 21 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 21 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 21 (expr -> expr DIVIDE expr .)
    VARIABLE        reduce using rule 21 (expr -> expr DIVIDE expr .)
    BUILDIN         reduce using rule 21 (expr -> expr DIVIDE expr .)
    FOR             reduce using rule 21 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 21 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 21 (expr -> expr DIVIDE expr .)
    LBRACE          reduce using rule 21 (expr -> expr DIVIDE expr .)
    NUMBER          reduce using rule 21 (expr -> expr DIVIDE expr .)
    STRING          reduce using rule 21 (expr -> expr DIVIDE expr .)
    LBRACKET        reduce using rule 21 (expr -> expr DIVIDE expr .)
    LPAREN          reduce using rule 21 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 21 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 21 (expr -> expr DIVIDE expr .)
    RBRACE          reduce using rule 21 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 21 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 21 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! GT              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 52

    (24) expr -> expr LT expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    GT              reduce using rule 24 (expr -> expr LT expr .)
    GE              reduce using rule 24 (expr -> expr LT expr .)
    LT              reduce using rule 24 (expr -> expr LT expr .)
    LE              reduce using rule 24 (expr -> expr LT expr .)
    EQ              reduce using rule 24 (expr -> expr LT expr .)
    NE              reduce using rule 24 (expr -> expr LT expr .)
    AND             reduce using rule 24 (expr -> expr LT expr .)
    OR              reduce using rule 24 (expr -> expr LT expr .)
    MOD             reduce using rule 24 (expr -> expr LT expr .)
    VARIABLE        reduce using rule 24 (expr -> expr LT expr .)
    BUILDIN         reduce using rule 24 (expr -> expr LT expr .)
    FOR             reduce using rule 24 (expr -> expr LT expr .)
    IF              reduce using rule 24 (expr -> expr LT expr .)
    WHILE           reduce using rule 24 (expr -> expr LT expr .)
    LBRACE          reduce using rule 24 (expr -> expr LT expr .)
    NUMBER          reduce using rule 24 (expr -> expr LT expr .)
    STRING          reduce using rule 24 (expr -> expr LT expr .)
    LBRACKET        reduce using rule 24 (expr -> expr LT expr .)
    LPAREN          reduce using rule 24 (expr -> expr LT expr .)
    $end            reduce using rule 24 (expr -> expr LT expr .)
    RPAREN          reduce using rule 24 (expr -> expr LT expr .)
    RBRACE          reduce using rule 24 (expr -> expr LT expr .)
    ELSE            reduce using rule 24 (expr -> expr LT expr .)
    COMMA           reduce using rule 24 (expr -> expr LT expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28

  ! PLUS            [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 24 (expr -> expr LT expr .) ]
  ! GT              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 53

    (20) expr -> expr TIMES expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    PLUS            reduce using rule 20 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 20 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 20 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 20 (expr -> expr TIMES expr .)
    GT              reduce using rule 20 (expr -> expr TIMES expr .)
    GE              reduce using rule 20 (expr -> expr TIMES expr .)
    LT              reduce using rule 20 (expr -> expr TIMES expr .)
    LE              reduce using rule 20 (expr -> expr TIMES expr .)
    EQ              reduce using rule 20 (expr -> expr TIMES expr .)
    NE              reduce using rule 20 (expr -> expr TIMES expr .)
    AND             reduce using rule 20 (expr -> expr TIMES expr .)
    OR              reduce using rule 20 (expr -> expr TIMES expr .)
    MOD             reduce using rule 20 (expr -> expr TIMES expr .)
    VARIABLE        reduce using rule 20 (expr -> expr TIMES expr .)
    BUILDIN         reduce using rule 20 (expr -> expr TIMES expr .)
    FOR             reduce using rule 20 (expr -> expr TIMES expr .)
    IF              reduce using rule 20 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 20 (expr -> expr TIMES expr .)
    LBRACE          reduce using rule 20 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 20 (expr -> expr TIMES expr .)
    STRING          reduce using rule 20 (expr -> expr TIMES expr .)
    LBRACKET        reduce using rule 20 (expr -> expr TIMES expr .)
    LPAREN          reduce using rule 20 (expr -> expr TIMES expr .)
    $end            reduce using rule 20 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 20 (expr -> expr TIMES expr .)
    RBRACE          reduce using rule 20 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 20 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 20 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 30 ]
  ! DIVIDE          [ shift and go to state 28 ]
  ! GT              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 54

    (23) expr -> expr GE expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    GT              reduce using rule 23 (expr -> expr GE expr .)
    GE              reduce using rule 23 (expr -> expr GE expr .)
    LT              reduce using rule 23 (expr -> expr GE expr .)
    LE              reduce using rule 23 (expr -> expr GE expr .)
    EQ              reduce using rule 23 (expr -> expr GE expr .)
    NE              reduce using rule 23 (expr -> expr GE expr .)
    AND             reduce using rule 23 (expr -> expr GE expr .)
    OR              reduce using rule 23 (expr -> expr GE expr .)
    MOD             reduce using rule 23 (expr -> expr GE expr .)
    VARIABLE        reduce using rule 23 (expr -> expr GE expr .)
    BUILDIN         reduce using rule 23 (expr -> expr GE expr .)
    FOR             reduce using rule 23 (expr -> expr GE expr .)
    IF              reduce using rule 23 (expr -> expr GE expr .)
    WHILE           reduce using rule 23 (expr -> expr GE expr .)
    LBRACE          reduce using rule 23 (expr -> expr GE expr .)
    NUMBER          reduce using rule 23 (expr -> expr GE expr .)
    STRING          reduce using rule 23 (expr -> expr GE expr .)
    LBRACKET        reduce using rule 23 (expr -> expr GE expr .)
    LPAREN          reduce using rule 23 (expr -> expr GE expr .)
    $end            reduce using rule 23 (expr -> expr GE expr .)
    RPAREN          reduce using rule 23 (expr -> expr GE expr .)
    RBRACE          reduce using rule 23 (expr -> expr GE expr .)
    ELSE            reduce using rule 23 (expr -> expr GE expr .)
    COMMA           reduce using rule 23 (expr -> expr GE expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28

  ! PLUS            [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 23 (expr -> expr GE expr .) ]
  ! GT              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 55

    (25) expr -> expr LE expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    GT              reduce using rule 25 (expr -> expr LE expr .)
    GE              reduce using rule 25 (expr -> expr LE expr .)
    LT              reduce using rule 25 (expr -> expr LE expr .)
    LE              reduce using rule 25 (expr -> expr LE expr .)
    EQ              reduce using rule 25 (expr -> expr LE expr .)
    NE              reduce using rule 25 (expr -> expr LE expr .)
    AND             reduce using rule 25 (expr -> expr LE expr .)
    OR              reduce using rule 25 (expr -> expr LE expr .)
    MOD             reduce using rule 25 (expr -> expr LE expr .)
    VARIABLE        reduce using rule 25 (expr -> expr LE expr .)
    BUILDIN         reduce using rule 25 (expr -> expr LE expr .)
    FOR             reduce using rule 25 (expr -> expr LE expr .)
    IF              reduce using rule 25 (expr -> expr LE expr .)
    WHILE           reduce using rule 25 (expr -> expr LE expr .)
    LBRACE          reduce using rule 25 (expr -> expr LE expr .)
    NUMBER          reduce using rule 25 (expr -> expr LE expr .)
    STRING          reduce using rule 25 (expr -> expr LE expr .)
    LBRACKET        reduce using rule 25 (expr -> expr LE expr .)
    LPAREN          reduce using rule 25 (expr -> expr LE expr .)
    $end            reduce using rule 25 (expr -> expr LE expr .)
    RPAREN          reduce using rule 25 (expr -> expr LE expr .)
    RBRACE          reduce using rule 25 (expr -> expr LE expr .)
    ELSE            reduce using rule 25 (expr -> expr LE expr .)
    COMMA           reduce using rule 25 (expr -> expr LE expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28

  ! PLUS            [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! GT              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 56

    (18) expr -> expr PLUS expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    PLUS            reduce using rule 18 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 18 (expr -> expr PLUS expr .)
    GT              reduce using rule 18 (expr -> expr PLUS expr .)
    GE              reduce using rule 18 (expr -> expr PLUS expr .)
    LT              reduce using rule 18 (expr -> expr PLUS expr .)
    LE              reduce using rule 18 (expr -> expr PLUS expr .)
    EQ              reduce using rule 18 (expr -> expr PLUS expr .)
    NE              reduce using rule 18 (expr -> expr PLUS expr .)
    AND             reduce using rule 18 (expr -> expr PLUS expr .)
    OR              reduce using rule 18 (expr -> expr PLUS expr .)
    MOD             reduce using rule 18 (expr -> expr PLUS expr .)
    VARIABLE        reduce using rule 18 (expr -> expr PLUS expr .)
    BUILDIN         reduce using rule 18 (expr -> expr PLUS expr .)
    FOR             reduce using rule 18 (expr -> expr PLUS expr .)
    IF              reduce using rule 18 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 18 (expr -> expr PLUS expr .)
    LBRACE          reduce using rule 18 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 18 (expr -> expr PLUS expr .)
    STRING          reduce using rule 18 (expr -> expr PLUS expr .)
    LBRACKET        reduce using rule 18 (expr -> expr PLUS expr .)
    LPAREN          reduce using rule 18 (expr -> expr PLUS expr .)
    $end            reduce using rule 18 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 18 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 18 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 18 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 18 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28

  ! TIMES           [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 36 ]
  ! GT              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 57

    (30) expr -> expr MOD expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    VARIABLE        reduce using rule 30 (expr -> expr MOD expr .)
    BUILDIN         reduce using rule 30 (expr -> expr MOD expr .)
    FOR             reduce using rule 30 (expr -> expr MOD expr .)
    IF              reduce using rule 30 (expr -> expr MOD expr .)
    WHILE           reduce using rule 30 (expr -> expr MOD expr .)
    LBRACE          reduce using rule 30 (expr -> expr MOD expr .)
    NUMBER          reduce using rule 30 (expr -> expr MOD expr .)
    STRING          reduce using rule 30 (expr -> expr MOD expr .)
    LBRACKET        reduce using rule 30 (expr -> expr MOD expr .)
    LPAREN          reduce using rule 30 (expr -> expr MOD expr .)
    $end            reduce using rule 30 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 30 (expr -> expr MOD expr .)
    RBRACE          reduce using rule 30 (expr -> expr MOD expr .)
    ELSE            reduce using rule 30 (expr -> expr MOD expr .)
    COMMA           reduce using rule 30 (expr -> expr MOD expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34

  ! PLUS            [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! TIMES           [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! GT              [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! GE              [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! LT              [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! LE              [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! EQ              [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! NE              [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! AND             [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! OR              [ reduce using rule 30 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 30 (expr -> expr MOD expr .) ]


state 58

    (26) expr -> expr EQ expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    GT              reduce using rule 26 (expr -> expr EQ expr .)
    GE              reduce using rule 26 (expr -> expr EQ expr .)
    LT              reduce using rule 26 (expr -> expr EQ expr .)
    LE              reduce using rule 26 (expr -> expr EQ expr .)
    EQ              reduce using rule 26 (expr -> expr EQ expr .)
    NE              reduce using rule 26 (expr -> expr EQ expr .)
    AND             reduce using rule 26 (expr -> expr EQ expr .)
    OR              reduce using rule 26 (expr -> expr EQ expr .)
    MOD             reduce using rule 26 (expr -> expr EQ expr .)
    VARIABLE        reduce using rule 26 (expr -> expr EQ expr .)
    BUILDIN         reduce using rule 26 (expr -> expr EQ expr .)
    FOR             reduce using rule 26 (expr -> expr EQ expr .)
    IF              reduce using rule 26 (expr -> expr EQ expr .)
    WHILE           reduce using rule 26 (expr -> expr EQ expr .)
    LBRACE          reduce using rule 26 (expr -> expr EQ expr .)
    NUMBER          reduce using rule 26 (expr -> expr EQ expr .)
    STRING          reduce using rule 26 (expr -> expr EQ expr .)
    LBRACKET        reduce using rule 26 (expr -> expr EQ expr .)
    LPAREN          reduce using rule 26 (expr -> expr EQ expr .)
    $end            reduce using rule 26 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 26 (expr -> expr EQ expr .)
    RBRACE          reduce using rule 26 (expr -> expr EQ expr .)
    ELSE            reduce using rule 26 (expr -> expr EQ expr .)
    COMMA           reduce using rule 26 (expr -> expr EQ expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28

  ! PLUS            [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 26 (expr -> expr EQ expr .) ]
  ! GT              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 59

    (19) expr -> expr MINUS expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    PLUS            reduce using rule 19 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 19 (expr -> expr MINUS expr .)
    GT              reduce using rule 19 (expr -> expr MINUS expr .)
    GE              reduce using rule 19 (expr -> expr MINUS expr .)
    LT              reduce using rule 19 (expr -> expr MINUS expr .)
    LE              reduce using rule 19 (expr -> expr MINUS expr .)
    EQ              reduce using rule 19 (expr -> expr MINUS expr .)
    NE              reduce using rule 19 (expr -> expr MINUS expr .)
    AND             reduce using rule 19 (expr -> expr MINUS expr .)
    OR              reduce using rule 19 (expr -> expr MINUS expr .)
    MOD             reduce using rule 19 (expr -> expr MINUS expr .)
    VARIABLE        reduce using rule 19 (expr -> expr MINUS expr .)
    BUILDIN         reduce using rule 19 (expr -> expr MINUS expr .)
    FOR             reduce using rule 19 (expr -> expr MINUS expr .)
    IF              reduce using rule 19 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 19 (expr -> expr MINUS expr .)
    LBRACE          reduce using rule 19 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 19 (expr -> expr MINUS expr .)
    STRING          reduce using rule 19 (expr -> expr MINUS expr .)
    LBRACKET        reduce using rule 19 (expr -> expr MINUS expr .)
    LPAREN          reduce using rule 19 (expr -> expr MINUS expr .)
    $end            reduce using rule 19 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 19 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 19 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 19 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 19 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28

  ! TIMES           [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 33 ]
  ! MINUS           [ shift and go to state 36 ]
  ! GT              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 60

    (27) expr -> expr NE expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    GT              reduce using rule 27 (expr -> expr NE expr .)
    GE              reduce using rule 27 (expr -> expr NE expr .)
    LT              reduce using rule 27 (expr -> expr NE expr .)
    LE              reduce using rule 27 (expr -> expr NE expr .)
    EQ              reduce using rule 27 (expr -> expr NE expr .)
    NE              reduce using rule 27 (expr -> expr NE expr .)
    AND             reduce using rule 27 (expr -> expr NE expr .)
    OR              reduce using rule 27 (expr -> expr NE expr .)
    MOD             reduce using rule 27 (expr -> expr NE expr .)
    VARIABLE        reduce using rule 27 (expr -> expr NE expr .)
    BUILDIN         reduce using rule 27 (expr -> expr NE expr .)
    FOR             reduce using rule 27 (expr -> expr NE expr .)
    IF              reduce using rule 27 (expr -> expr NE expr .)
    WHILE           reduce using rule 27 (expr -> expr NE expr .)
    LBRACE          reduce using rule 27 (expr -> expr NE expr .)
    NUMBER          reduce using rule 27 (expr -> expr NE expr .)
    STRING          reduce using rule 27 (expr -> expr NE expr .)
    LBRACKET        reduce using rule 27 (expr -> expr NE expr .)
    LPAREN          reduce using rule 27 (expr -> expr NE expr .)
    $end            reduce using rule 27 (expr -> expr NE expr .)
    RPAREN          reduce using rule 27 (expr -> expr NE expr .)
    RBRACE          reduce using rule 27 (expr -> expr NE expr .)
    ELSE            reduce using rule 27 (expr -> expr NE expr .)
    COMMA           reduce using rule 27 (expr -> expr NE expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28

  ! PLUS            [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! GT              [ shift and go to state 27 ]
  ! GE              [ shift and go to state 31 ]
  ! LT              [ shift and go to state 29 ]
  ! LE              [ shift and go to state 32 ]
  ! EQ              [ shift and go to state 35 ]
  ! NE              [ shift and go to state 37 ]
  ! AND             [ shift and go to state 26 ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 61

    (29) expr -> expr OR expr .
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    OR              reduce using rule 29 (expr -> expr OR expr .)
    MOD             reduce using rule 29 (expr -> expr OR expr .)
    VARIABLE        reduce using rule 29 (expr -> expr OR expr .)
    BUILDIN         reduce using rule 29 (expr -> expr OR expr .)
    FOR             reduce using rule 29 (expr -> expr OR expr .)
    IF              reduce using rule 29 (expr -> expr OR expr .)
    WHILE           reduce using rule 29 (expr -> expr OR expr .)
    LBRACE          reduce using rule 29 (expr -> expr OR expr .)
    NUMBER          reduce using rule 29 (expr -> expr OR expr .)
    STRING          reduce using rule 29 (expr -> expr OR expr .)
    LBRACKET        reduce using rule 29 (expr -> expr OR expr .)
    LPAREN          reduce using rule 29 (expr -> expr OR expr .)
    $end            reduce using rule 29 (expr -> expr OR expr .)
    RPAREN          reduce using rule 29 (expr -> expr OR expr .)
    RBRACE          reduce using rule 29 (expr -> expr OR expr .)
    ELSE            reduce using rule 29 (expr -> expr OR expr .)
    COMMA           reduce using rule 29 (expr -> expr OR expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26

  ! PLUS            [ reduce using rule 29 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 29 (expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 29 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 29 (expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 29 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 29 (expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 29 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 29 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 34 ]


state 62

    (9) stmt -> WHILE LPAREN expr RPAREN . stmt
    (3) stmt -> . VARIABLE EQUAL expr
    (4) stmt -> . BUILDIN EQUAL expr
    (5) stmt -> . expr
    (6) stmt -> . FOR VARIABLE IN VARIABLE stmt
    (7) stmt -> . IF LPAREN expr RPAREN stmt
    (8) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (9) stmt -> . WHILE LPAREN expr RPAREN stmt
    (10) stmt -> . LBRACE stmtlist RBRACE
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    VARIABLE        shift and go to state 10
    BUILDIN         shift and go to state 6
    FOR             shift and go to state 7
    IF              shift and go to state 11
    WHILE           shift and go to state 4
    LBRACE          shift and go to state 12
    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    LPAREN          shift and go to state 9

    expr                           shift and go to state 13
    stmt                           shift and go to state 67

state 63

    (33) expr -> BUILDIN LPAREN expr RPAREN .

    PLUS            reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    MINUS           reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    TIMES           reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    GT              reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    GE              reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    LT              reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    LE              reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    EQ              reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    NE              reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    AND             reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    OR              reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    MOD             reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    VARIABLE        reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    BUILDIN         reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    FOR             reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    IF              reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    WHILE           reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    LBRACE          reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    NUMBER          reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    STRING          reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    LBRACKET        reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    LPAREN          reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    $end            reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    RPAREN          reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    RBRACE          reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    ELSE            reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)
    COMMA           reduce using rule 33 (expr -> BUILDIN LPAREN expr RPAREN .)


state 64

    (34) expr -> BUILDIN LPAREN expr COMMA . expr RPAREN
    (35) expr -> BUILDIN LPAREN expr COMMA . expr COMMA expr RPAREN
    (36) expr -> BUILDIN LPAREN expr COMMA . expr COMMA expr COMMA expr RPAREN
    (37) expr -> BUILDIN LPAREN expr COMMA . expr COMMA expr COMMA expr COMMA expr RPAREN
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 68

state 65

    (6) stmt -> FOR VARIABLE IN VARIABLE . stmt
    (3) stmt -> . VARIABLE EQUAL expr
    (4) stmt -> . BUILDIN EQUAL expr
    (5) stmt -> . expr
    (6) stmt -> . FOR VARIABLE IN VARIABLE stmt
    (7) stmt -> . IF LPAREN expr RPAREN stmt
    (8) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (9) stmt -> . WHILE LPAREN expr RPAREN stmt
    (10) stmt -> . LBRACE stmtlist RBRACE
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    VARIABLE        shift and go to state 10
    BUILDIN         shift and go to state 6
    FOR             shift and go to state 7
    IF              shift and go to state 11
    WHILE           shift and go to state 4
    LBRACE          shift and go to state 12
    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    LPAREN          shift and go to state 9

    expr                           shift and go to state 13
    stmt                           shift and go to state 69

state 66

    (7) stmt -> IF LPAREN expr RPAREN . stmt
    (8) stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt
    (3) stmt -> . VARIABLE EQUAL expr
    (4) stmt -> . BUILDIN EQUAL expr
    (5) stmt -> . expr
    (6) stmt -> . FOR VARIABLE IN VARIABLE stmt
    (7) stmt -> . IF LPAREN expr RPAREN stmt
    (8) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (9) stmt -> . WHILE LPAREN expr RPAREN stmt
    (10) stmt -> . LBRACE stmtlist RBRACE
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    VARIABLE        shift and go to state 10
    BUILDIN         shift and go to state 6
    FOR             shift and go to state 7
    IF              shift and go to state 11
    WHILE           shift and go to state 4
    LBRACE          shift and go to state 12
    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    LPAREN          shift and go to state 9

    expr                           shift and go to state 13
    stmt                           shift and go to state 70

state 67

    (9) stmt -> WHILE LPAREN expr RPAREN stmt .

    RBRACE          reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    VARIABLE        reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    BUILDIN         reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IF              reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    STRING          reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACKET        reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    $end            reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 9 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 68

    (34) expr -> BUILDIN LPAREN expr COMMA expr . RPAREN
    (35) expr -> BUILDIN LPAREN expr COMMA expr . COMMA expr RPAREN
    (36) expr -> BUILDIN LPAREN expr COMMA expr . COMMA expr COMMA expr RPAREN
    (37) expr -> BUILDIN LPAREN expr COMMA expr . COMMA expr COMMA expr COMMA expr RPAREN
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    RPAREN          shift and go to state 71
    COMMA           shift and go to state 72
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34


state 69

    (6) stmt -> FOR VARIABLE IN VARIABLE stmt .

    RBRACE          reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    VARIABLE        reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    BUILDIN         reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    FOR             reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    IF              reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    WHILE           reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    LBRACE          reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    NUMBER          reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    STRING          reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    LBRACKET        reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    LPAREN          reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    $end            reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)
    ELSE            reduce using rule 6 (stmt -> FOR VARIABLE IN VARIABLE stmt .)


state 70

    (7) stmt -> IF LPAREN expr RPAREN stmt .
    (8) stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt

    RBRACE          reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    VARIABLE        reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    BUILDIN         reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    IF              reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    STRING          reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    LBRACKET        reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    $end            reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .)
    ELSE            shift and go to state 73

  ! ELSE            [ reduce using rule 7 (stmt -> IF LPAREN expr RPAREN stmt .) ]


state 71

    (34) expr -> BUILDIN LPAREN expr COMMA expr RPAREN .

    PLUS            reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    MINUS           reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    TIMES           reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    DIVIDE          reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    GT              reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    GE              reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    LT              reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    LE              reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    EQ              reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    NE              reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    AND             reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    OR              reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    MOD             reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    VARIABLE        reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    BUILDIN         reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    FOR             reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    IF              reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    WHILE           reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    LBRACE          reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    NUMBER          reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    STRING          reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    LBRACKET        reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    LPAREN          reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    $end            reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    RBRACE          reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    ELSE            reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)
    COMMA           reduce using rule 34 (expr -> BUILDIN LPAREN expr COMMA expr RPAREN .)


state 72

    (35) expr -> BUILDIN LPAREN expr COMMA expr COMMA . expr RPAREN
    (36) expr -> BUILDIN LPAREN expr COMMA expr COMMA . expr COMMA expr RPAREN
    (37) expr -> BUILDIN LPAREN expr COMMA expr COMMA . expr COMMA expr COMMA expr RPAREN
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 74

state 73

    (8) stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt
    (3) stmt -> . VARIABLE EQUAL expr
    (4) stmt -> . BUILDIN EQUAL expr
    (5) stmt -> . expr
    (6) stmt -> . FOR VARIABLE IN VARIABLE stmt
    (7) stmt -> . IF LPAREN expr RPAREN stmt
    (8) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (9) stmt -> . WHILE LPAREN expr RPAREN stmt
    (10) stmt -> . LBRACE stmtlist RBRACE
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    VARIABLE        shift and go to state 10
    BUILDIN         shift and go to state 6
    FOR             shift and go to state 7
    IF              shift and go to state 11
    WHILE           shift and go to state 4
    LBRACE          shift and go to state 12
    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    LPAREN          shift and go to state 9

    expr                           shift and go to state 13
    stmt                           shift and go to state 75

state 74

    (35) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr . RPAREN
    (36) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr . COMMA expr RPAREN
    (37) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr . COMMA expr COMMA expr RPAREN
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    RPAREN          shift and go to state 76
    COMMA           shift and go to state 77
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34


state 75

    (8) stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .

    RBRACE          reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    VARIABLE        reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    BUILDIN         reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FOR             reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    IF              reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    WHILE           reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LBRACE          reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NUMBER          reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    STRING          reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LBRACKET        reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LPAREN          reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    $end            reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)


state 76

    (35) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .

    PLUS            reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    MINUS           reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    TIMES           reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    DIVIDE          reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    GT              reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    GE              reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    LT              reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    LE              reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    EQ              reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    NE              reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    AND             reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    OR              reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    MOD             reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    VARIABLE        reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    BUILDIN         reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    FOR             reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    IF              reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    WHILE           reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    LBRACE          reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    NUMBER          reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    STRING          reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    LBRACKET        reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    LPAREN          reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    $end            reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    RBRACE          reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    ELSE            reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)
    COMMA           reduce using rule 35 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN .)


state 77

    (36) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA . expr RPAREN
    (37) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA . expr COMMA expr RPAREN
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 78

state 78

    (36) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr . RPAREN
    (37) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr . COMMA expr RPAREN
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    RPAREN          shift and go to state 79
    COMMA           shift and go to state 80
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34


state 79

    (36) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .

    PLUS            reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    MINUS           reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    TIMES           reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    DIVIDE          reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    GT              reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    GE              reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    LT              reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    LE              reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    EQ              reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    NE              reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    AND             reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    OR              reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    MOD             reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    VARIABLE        reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    BUILDIN         reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    FOR             reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    IF              reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    WHILE           reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    LBRACE          reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    NUMBER          reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    STRING          reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    LBRACKET        reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    LPAREN          reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    $end            reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    RBRACE          reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    ELSE            reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)
    COMMA           reduce using rule 36 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN .)


state 80

    (37) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA . expr RPAREN
    (13) expr -> . NUMBER
    (14) expr -> . STRING
    (15) expr -> . LBRACKET RBRACKET
    (16) expr -> . VARIABLE
    (17) expr -> . BUILDIN
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GT expr
    (23) expr -> . expr GE expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr EQ expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr AND expr
    (29) expr -> . expr OR expr
    (30) expr -> . expr MOD expr
    (31) expr -> . LPAREN expr RPAREN
    (32) expr -> . BUILDIN LPAREN RPAREN
    (33) expr -> . BUILDIN LPAREN expr RPAREN
    (34) expr -> . BUILDIN LPAREN expr COMMA expr RPAREN
    (35) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr RPAREN
    (36) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN
    (37) expr -> . BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN

    NUMBER          shift and go to state 2
    STRING          shift and go to state 5
    LBRACKET        shift and go to state 3
    VARIABLE        shift and go to state 20
    BUILDIN         shift and go to state 19
    LPAREN          shift and go to state 9

    expr                           shift and go to state 81

state 81

    (37) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr . RPAREN
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GT expr
    (23) expr -> expr . GE expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . EQ expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . AND expr
    (29) expr -> expr . OR expr
    (30) expr -> expr . MOD expr

    RPAREN          shift and go to state 82
    PLUS            shift and go to state 33
    MINUS           shift and go to state 36
    TIMES           shift and go to state 30
    DIVIDE          shift and go to state 28
    GT              shift and go to state 27
    GE              shift and go to state 31
    LT              shift and go to state 29
    LE              shift and go to state 32
    EQ              shift and go to state 35
    NE              shift and go to state 37
    AND             shift and go to state 26
    OR              shift and go to state 38
    MOD             shift and go to state 34


state 82

    (37) expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .

    PLUS            reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    MINUS           reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    TIMES           reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    DIVIDE          reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    GT              reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    GE              reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    LT              reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    LE              reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    EQ              reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    NE              reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    AND             reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    OR              reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    MOD             reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    VARIABLE        reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    BUILDIN         reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    FOR             reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    IF              reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    WHILE           reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    LBRACE          reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    NUMBER          reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    STRING          reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    LBRACKET        reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    LPAREN          reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    $end            reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    RBRACE          reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    ELSE            reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)
    COMMA           reduce using rule 37 (expr -> BUILDIN LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 6 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 19 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 57 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 57 resolved as shift
WARNING: shift/reduce conflict for GT in state 57 resolved as shift
WARNING: shift/reduce conflict for GE in state 57 resolved as shift
WARNING: shift/reduce conflict for LT in state 57 resolved as shift
WARNING: shift/reduce conflict for LE in state 57 resolved as shift
WARNING: shift/reduce conflict for EQ in state 57 resolved as shift
WARNING: shift/reduce conflict for NE in state 57 resolved as shift
WARNING: shift/reduce conflict for AND in state 57 resolved as shift
WARNING: shift/reduce conflict for OR in state 57 resolved as shift
WARNING: shift/reduce conflict for MOD in state 57 resolved as shift
